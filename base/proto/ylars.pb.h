// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ylars.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ylars_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ylars_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ylars_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ylars_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ylars_2eproto;
namespace ylars {
class GetHostRequest;
struct GetHostRequestDefaultTypeInternal;
extern GetHostRequestDefaultTypeInternal _GetHostRequest_default_instance_;
class GetHostResponse;
struct GetHostResponseDefaultTypeInternal;
extern GetHostResponseDefaultTypeInternal _GetHostResponse_default_instance_;
class GetRouteRequest;
struct GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class GetRouteResponse;
struct GetRouteResponseDefaultTypeInternal;
extern GetRouteResponseDefaultTypeInternal _GetRouteResponse_default_instance_;
class HostCallResult;
struct HostCallResultDefaultTypeInternal;
extern HostCallResultDefaultTypeInternal _HostCallResult_default_instance_;
class HostInfo;
struct HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class ReportRequest;
struct ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportStatusReq;
struct ReportStatusReqDefaultTypeInternal;
extern ReportStatusReqDefaultTypeInternal _ReportStatusReq_default_instance_;
}  // namespace ylars
PROTOBUF_NAMESPACE_OPEN
template<> ::ylars::GetHostRequest* Arena::CreateMaybeMessage<::ylars::GetHostRequest>(Arena*);
template<> ::ylars::GetHostResponse* Arena::CreateMaybeMessage<::ylars::GetHostResponse>(Arena*);
template<> ::ylars::GetRouteRequest* Arena::CreateMaybeMessage<::ylars::GetRouteRequest>(Arena*);
template<> ::ylars::GetRouteResponse* Arena::CreateMaybeMessage<::ylars::GetRouteResponse>(Arena*);
template<> ::ylars::HostCallResult* Arena::CreateMaybeMessage<::ylars::HostCallResult>(Arena*);
template<> ::ylars::HostInfo* Arena::CreateMaybeMessage<::ylars::HostInfo>(Arena*);
template<> ::ylars::ReportRequest* Arena::CreateMaybeMessage<::ylars::ReportRequest>(Arena*);
template<> ::ylars::ReportStatusReq* Arena::CreateMaybeMessage<::ylars::ReportStatusReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ylars {

enum MessageId : int {
  ID_UNKNOW = 0,
  ID_GetRouteRequest = 1,
  ID_GetRouteResponse = 2,
  ID_ReportStatusRequest = 3,
  ID_GetHostRequest = 4,
  ID_GetHostResponse = 5,
  ID_ReportRequest = 6,
  MessageId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageId_IsValid(int value);
constexpr MessageId MessageId_MIN = ID_UNKNOW;
constexpr MessageId MessageId_MAX = ID_ReportRequest;
constexpr int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor();
template<typename T>
inline const std::string& MessageId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageId_descriptor(), enum_t_value);
}
inline bool MessageId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
enum LastRetCode : int {
  RET_SUCC = 0,
  RET_OVERLOAD = 1,
  RET_SYSTEM_ERROR = 2,
  RET_NOEXIST = 3,
  LastRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LastRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LastRetCode_IsValid(int value);
constexpr LastRetCode LastRetCode_MIN = RET_SUCC;
constexpr LastRetCode LastRetCode_MAX = RET_NOEXIST;
constexpr int LastRetCode_ARRAYSIZE = LastRetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LastRetCode_descriptor();
template<typename T>
inline const std::string& LastRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LastRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LastRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LastRetCode_descriptor(), enum_t_value);
}
inline bool LastRetCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LastRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LastRetCode>(
    LastRetCode_descriptor(), name, value);
}
// ===================================================================

class HostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.HostInfo) */ {
 public:
  inline HostInfo() : HostInfo(nullptr) {}
  ~HostInfo() override;
  explicit PROTOBUF_CONSTEXPR HostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostInfo& from) {
    HostInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.HostInfo";
  }
  protected:
  explicit HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // uint32 ip = 1;
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.HostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t ip_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class GetRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.GetRouteRequest) */ {
 public:
  inline GetRouteRequest() : GetRouteRequest(nullptr) {}
  ~GetRouteRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteRequest(const GetRouteRequest& from);
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRouteRequest& from) {
    GetRouteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.GetRouteRequest";
  }
  protected:
  explicit GetRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModIdFieldNumber = 1,
    kCmdIdFieldNumber = 2,
  };
  // uint32 modId = 1;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdId = 2;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.GetRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t modid_;
    uint32_t cmdid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class GetRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.GetRouteResponse) */ {
 public:
  inline GetRouteResponse() : GetRouteResponse(nullptr) {}
  ~GetRouteResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteResponse(const GetRouteResponse& from);
  GetRouteResponse(GetRouteResponse&& from) noexcept
    : GetRouteResponse() {
    *this = ::std::move(from);
  }

  inline GetRouteResponse& operator=(const GetRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteResponse& operator=(GetRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteResponse* internal_default_instance() {
    return reinterpret_cast<const GetRouteResponse*>(
               &_GetRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRouteResponse& a, GetRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRouteResponse& from) {
    GetRouteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.GetRouteResponse";
  }
  protected:
  explicit GetRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 3,
    kModIdFieldNumber = 1,
    kCmdIdFieldNumber = 2,
  };
  // repeated .ylars.HostInfo host = 3;
  int host_size() const;
  private:
  int _internal_host_size() const;
  public:
  void clear_host();
  ::ylars::HostInfo* mutable_host(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostInfo >*
      mutable_host();
  private:
  const ::ylars::HostInfo& _internal_host(int index) const;
  ::ylars::HostInfo* _internal_add_host();
  public:
  const ::ylars::HostInfo& host(int index) const;
  ::ylars::HostInfo* add_host();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostInfo >&
      host() const;

  // uint32 modId = 1;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdId = 2;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.GetRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostInfo > host_;
    uint32_t modid_;
    uint32_t cmdid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class HostCallResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.HostCallResult) */ {
 public:
  inline HostCallResult() : HostCallResult(nullptr) {}
  ~HostCallResult() override;
  explicit PROTOBUF_CONSTEXPR HostCallResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostCallResult(const HostCallResult& from);
  HostCallResult(HostCallResult&& from) noexcept
    : HostCallResult() {
    *this = ::std::move(from);
  }

  inline HostCallResult& operator=(const HostCallResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostCallResult& operator=(HostCallResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostCallResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostCallResult* internal_default_instance() {
    return reinterpret_cast<const HostCallResult*>(
               &_HostCallResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostCallResult& a, HostCallResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HostCallResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostCallResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostCallResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostCallResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostCallResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostCallResult& from) {
    HostCallResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostCallResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.HostCallResult";
  }
  protected:
  explicit HostCallResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kSuccFieldNumber = 3,
    kErrFieldNumber = 4,
    kOverloadFieldNumber = 5,
  };
  // uint32 ip = 1;
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 succ = 3;
  void clear_succ();
  uint32_t succ() const;
  void set_succ(uint32_t value);
  private:
  uint32_t _internal_succ() const;
  void _internal_set_succ(uint32_t value);
  public:

  // uint32 err = 4;
  void clear_err();
  uint32_t err() const;
  void set_err(uint32_t value);
  private:
  uint32_t _internal_err() const;
  void _internal_set_err(uint32_t value);
  public:

  // bool overload = 5;
  void clear_overload();
  bool overload() const;
  void set_overload(bool value);
  private:
  bool _internal_overload() const;
  void _internal_set_overload(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.HostCallResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t ip_;
    uint32_t port_;
    uint32_t succ_;
    uint32_t err_;
    bool overload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class ReportStatusReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.ReportStatusReq) */ {
 public:
  inline ReportStatusReq() : ReportStatusReq(nullptr) {}
  ~ReportStatusReq() override;
  explicit PROTOBUF_CONSTEXPR ReportStatusReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportStatusReq(const ReportStatusReq& from);
  ReportStatusReq(ReportStatusReq&& from) noexcept
    : ReportStatusReq() {
    *this = ::std::move(from);
  }

  inline ReportStatusReq& operator=(const ReportStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportStatusReq& operator=(ReportStatusReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportStatusReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportStatusReq* internal_default_instance() {
    return reinterpret_cast<const ReportStatusReq*>(
               &_ReportStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReportStatusReq& a, ReportStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportStatusReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportStatusReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportStatusReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportStatusReq& from) {
    ReportStatusReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportStatusReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.ReportStatusReq";
  }
  protected:
  explicit ReportStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 4,
    kModIdFieldNumber = 1,
    kCmdIdFieldNumber = 2,
    kCallerFieldNumber = 3,
    kTsFieldNumber = 5,
  };
  // repeated .ylars.HostCallResult result = 4;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::ylars::HostCallResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostCallResult >*
      mutable_result();
  private:
  const ::ylars::HostCallResult& _internal_result(int index) const;
  ::ylars::HostCallResult* _internal_add_result();
  public:
  const ::ylars::HostCallResult& result(int index) const;
  ::ylars::HostCallResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostCallResult >&
      result() const;

  // uint32 modId = 1;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdId = 2;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // int32 caller = 3;
  void clear_caller();
  int32_t caller() const;
  void set_caller(int32_t value);
  private:
  int32_t _internal_caller() const;
  void _internal_set_caller(int32_t value);
  public:

  // uint32 ts = 5;
  void clear_ts();
  uint32_t ts() const;
  void set_ts(uint32_t value);
  private:
  uint32_t _internal_ts() const;
  void _internal_set_ts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.ReportStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostCallResult > result_;
    uint32_t modid_;
    uint32_t cmdid_;
    int32_t caller_;
    uint32_t ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class GetHostRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.GetHostRequest) */ {
 public:
  inline GetHostRequest() : GetHostRequest(nullptr) {}
  ~GetHostRequest() override;
  explicit PROTOBUF_CONSTEXPR GetHostRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHostRequest(const GetHostRequest& from);
  GetHostRequest(GetHostRequest&& from) noexcept
    : GetHostRequest() {
    *this = ::std::move(from);
  }

  inline GetHostRequest& operator=(const GetHostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostRequest& operator=(GetHostRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHostRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHostRequest* internal_default_instance() {
    return reinterpret_cast<const GetHostRequest*>(
               &_GetHostRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetHostRequest& a, GetHostRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHostRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHostRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHostRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHostRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHostRequest& from) {
    GetHostRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHostRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.GetHostRequest";
  }
  protected:
  explicit GetHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kModidFieldNumber = 2,
    kCmdidFieldNumber = 3,
  };
  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // uint32 modid = 2;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdid = 3;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.GetHostRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t seq_;
    uint32_t modid_;
    uint32_t cmdid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class GetHostResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.GetHostResponse) */ {
 public:
  inline GetHostResponse() : GetHostResponse(nullptr) {}
  ~GetHostResponse() override;
  explicit PROTOBUF_CONSTEXPR GetHostResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHostResponse(const GetHostResponse& from);
  GetHostResponse(GetHostResponse&& from) noexcept
    : GetHostResponse() {
    *this = ::std::move(from);
  }

  inline GetHostResponse& operator=(const GetHostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHostResponse& operator=(GetHostResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHostResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHostResponse* internal_default_instance() {
    return reinterpret_cast<const GetHostResponse*>(
               &_GetHostResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetHostResponse& a, GetHostResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHostResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHostResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHostResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHostResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHostResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetHostResponse& from) {
    GetHostResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHostResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.GetHostResponse";
  }
  protected:
  explicit GetHostResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 5,
    kSeqFieldNumber = 1,
    kModidFieldNumber = 2,
    kCmdidFieldNumber = 3,
    kRetcodeFieldNumber = 4,
  };
  // .ylars.HostInfo host = 5;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::ylars::HostInfo& host() const;
  PROTOBUF_NODISCARD ::ylars::HostInfo* release_host();
  ::ylars::HostInfo* mutable_host();
  void set_allocated_host(::ylars::HostInfo* host);
  private:
  const ::ylars::HostInfo& _internal_host() const;
  ::ylars::HostInfo* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::ylars::HostInfo* host);
  ::ylars::HostInfo* unsafe_arena_release_host();

  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // uint32 modid = 2;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdid = 3;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // int32 retcode = 4;
  void clear_retcode();
  int32_t retcode() const;
  void set_retcode(int32_t value);
  private:
  int32_t _internal_retcode() const;
  void _internal_set_retcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.GetHostResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ylars::HostInfo* host_;
    uint32_t seq_;
    uint32_t modid_;
    uint32_t cmdid_;
    int32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// -------------------------------------------------------------------

class ReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ylars.ReportRequest) */ {
 public:
  inline ReportRequest() : ReportRequest(nullptr) {}
  ~ReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportRequest(const ReportRequest& from);
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportRequest& from) {
    ReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ylars.ReportRequest";
  }
  protected:
  explicit ReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 3,
    kModidFieldNumber = 1,
    kCmdidFieldNumber = 2,
    kIsSuccFieldNumber = 4,
  };
  // .ylars.HostInfo host = 3;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::ylars::HostInfo& host() const;
  PROTOBUF_NODISCARD ::ylars::HostInfo* release_host();
  ::ylars::HostInfo* mutable_host();
  void set_allocated_host(::ylars::HostInfo* host);
  private:
  const ::ylars::HostInfo& _internal_host() const;
  ::ylars::HostInfo* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::ylars::HostInfo* host);
  ::ylars::HostInfo* unsafe_arena_release_host();

  // uint32 modid = 1;
  void clear_modid();
  uint32_t modid() const;
  void set_modid(uint32_t value);
  private:
  uint32_t _internal_modid() const;
  void _internal_set_modid(uint32_t value);
  public:

  // uint32 cmdid = 2;
  void clear_cmdid();
  uint32_t cmdid() const;
  void set_cmdid(uint32_t value);
  private:
  uint32_t _internal_cmdid() const;
  void _internal_set_cmdid(uint32_t value);
  public:

  // bool isSucc = 4;
  void clear_issucc();
  bool issucc() const;
  void set_issucc(bool value);
  private:
  bool _internal_issucc() const;
  void _internal_set_issucc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ylars.ReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ylars::HostInfo* host_;
    uint32_t modid_;
    uint32_t cmdid_;
    bool issucc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ylars_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostInfo

// uint32 ip = 1;
inline void HostInfo::clear_ip() {
  _impl_.ip_ = 0u;
}
inline uint32_t HostInfo::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t HostInfo::ip() const {
  // @@protoc_insertion_point(field_get:ylars.HostInfo.ip)
  return _internal_ip();
}
inline void HostInfo::_internal_set_ip(uint32_t value) {
  
  _impl_.ip_ = value;
}
inline void HostInfo::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ylars.HostInfo.ip)
}

// uint32 port = 2;
inline void HostInfo::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t HostInfo::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t HostInfo::port() const {
  // @@protoc_insertion_point(field_get:ylars.HostInfo.port)
  return _internal_port();
}
inline void HostInfo::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void HostInfo::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ylars.HostInfo.port)
}

// -------------------------------------------------------------------

// GetRouteRequest

// uint32 modId = 1;
inline void GetRouteRequest::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t GetRouteRequest::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t GetRouteRequest::modid() const {
  // @@protoc_insertion_point(field_get:ylars.GetRouteRequest.modId)
  return _internal_modid();
}
inline void GetRouteRequest::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void GetRouteRequest::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.GetRouteRequest.modId)
}

// uint32 cmdId = 2;
inline void GetRouteRequest::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t GetRouteRequest::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t GetRouteRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.GetRouteRequest.cmdId)
  return _internal_cmdid();
}
inline void GetRouteRequest::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void GetRouteRequest::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.GetRouteRequest.cmdId)
}

// -------------------------------------------------------------------

// GetRouteResponse

// uint32 modId = 1;
inline void GetRouteResponse::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t GetRouteResponse::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t GetRouteResponse::modid() const {
  // @@protoc_insertion_point(field_get:ylars.GetRouteResponse.modId)
  return _internal_modid();
}
inline void GetRouteResponse::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void GetRouteResponse::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.GetRouteResponse.modId)
}

// uint32 cmdId = 2;
inline void GetRouteResponse::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t GetRouteResponse::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t GetRouteResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.GetRouteResponse.cmdId)
  return _internal_cmdid();
}
inline void GetRouteResponse::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void GetRouteResponse::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.GetRouteResponse.cmdId)
}

// repeated .ylars.HostInfo host = 3;
inline int GetRouteResponse::_internal_host_size() const {
  return _impl_.host_.size();
}
inline int GetRouteResponse::host_size() const {
  return _internal_host_size();
}
inline void GetRouteResponse::clear_host() {
  _impl_.host_.Clear();
}
inline ::ylars::HostInfo* GetRouteResponse::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:ylars.GetRouteResponse.host)
  return _impl_.host_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostInfo >*
GetRouteResponse::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:ylars.GetRouteResponse.host)
  return &_impl_.host_;
}
inline const ::ylars::HostInfo& GetRouteResponse::_internal_host(int index) const {
  return _impl_.host_.Get(index);
}
inline const ::ylars::HostInfo& GetRouteResponse::host(int index) const {
  // @@protoc_insertion_point(field_get:ylars.GetRouteResponse.host)
  return _internal_host(index);
}
inline ::ylars::HostInfo* GetRouteResponse::_internal_add_host() {
  return _impl_.host_.Add();
}
inline ::ylars::HostInfo* GetRouteResponse::add_host() {
  ::ylars::HostInfo* _add = _internal_add_host();
  // @@protoc_insertion_point(field_add:ylars.GetRouteResponse.host)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostInfo >&
GetRouteResponse::host() const {
  // @@protoc_insertion_point(field_list:ylars.GetRouteResponse.host)
  return _impl_.host_;
}

// -------------------------------------------------------------------

// HostCallResult

// uint32 ip = 1;
inline void HostCallResult::clear_ip() {
  _impl_.ip_ = 0u;
}
inline uint32_t HostCallResult::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t HostCallResult::ip() const {
  // @@protoc_insertion_point(field_get:ylars.HostCallResult.ip)
  return _internal_ip();
}
inline void HostCallResult::_internal_set_ip(uint32_t value) {
  
  _impl_.ip_ = value;
}
inline void HostCallResult::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ylars.HostCallResult.ip)
}

// uint32 port = 2;
inline void HostCallResult::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t HostCallResult::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t HostCallResult::port() const {
  // @@protoc_insertion_point(field_get:ylars.HostCallResult.port)
  return _internal_port();
}
inline void HostCallResult::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void HostCallResult::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ylars.HostCallResult.port)
}

// uint32 succ = 3;
inline void HostCallResult::clear_succ() {
  _impl_.succ_ = 0u;
}
inline uint32_t HostCallResult::_internal_succ() const {
  return _impl_.succ_;
}
inline uint32_t HostCallResult::succ() const {
  // @@protoc_insertion_point(field_get:ylars.HostCallResult.succ)
  return _internal_succ();
}
inline void HostCallResult::_internal_set_succ(uint32_t value) {
  
  _impl_.succ_ = value;
}
inline void HostCallResult::set_succ(uint32_t value) {
  _internal_set_succ(value);
  // @@protoc_insertion_point(field_set:ylars.HostCallResult.succ)
}

// uint32 err = 4;
inline void HostCallResult::clear_err() {
  _impl_.err_ = 0u;
}
inline uint32_t HostCallResult::_internal_err() const {
  return _impl_.err_;
}
inline uint32_t HostCallResult::err() const {
  // @@protoc_insertion_point(field_get:ylars.HostCallResult.err)
  return _internal_err();
}
inline void HostCallResult::_internal_set_err(uint32_t value) {
  
  _impl_.err_ = value;
}
inline void HostCallResult::set_err(uint32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:ylars.HostCallResult.err)
}

// bool overload = 5;
inline void HostCallResult::clear_overload() {
  _impl_.overload_ = false;
}
inline bool HostCallResult::_internal_overload() const {
  return _impl_.overload_;
}
inline bool HostCallResult::overload() const {
  // @@protoc_insertion_point(field_get:ylars.HostCallResult.overload)
  return _internal_overload();
}
inline void HostCallResult::_internal_set_overload(bool value) {
  
  _impl_.overload_ = value;
}
inline void HostCallResult::set_overload(bool value) {
  _internal_set_overload(value);
  // @@protoc_insertion_point(field_set:ylars.HostCallResult.overload)
}

// -------------------------------------------------------------------

// ReportStatusReq

// uint32 modId = 1;
inline void ReportStatusReq::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t ReportStatusReq::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t ReportStatusReq::modid() const {
  // @@protoc_insertion_point(field_get:ylars.ReportStatusReq.modId)
  return _internal_modid();
}
inline void ReportStatusReq::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void ReportStatusReq::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.ReportStatusReq.modId)
}

// uint32 cmdId = 2;
inline void ReportStatusReq::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t ReportStatusReq::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t ReportStatusReq::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.ReportStatusReq.cmdId)
  return _internal_cmdid();
}
inline void ReportStatusReq::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void ReportStatusReq::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.ReportStatusReq.cmdId)
}

// int32 caller = 3;
inline void ReportStatusReq::clear_caller() {
  _impl_.caller_ = 0;
}
inline int32_t ReportStatusReq::_internal_caller() const {
  return _impl_.caller_;
}
inline int32_t ReportStatusReq::caller() const {
  // @@protoc_insertion_point(field_get:ylars.ReportStatusReq.caller)
  return _internal_caller();
}
inline void ReportStatusReq::_internal_set_caller(int32_t value) {
  
  _impl_.caller_ = value;
}
inline void ReportStatusReq::set_caller(int32_t value) {
  _internal_set_caller(value);
  // @@protoc_insertion_point(field_set:ylars.ReportStatusReq.caller)
}

// repeated .ylars.HostCallResult result = 4;
inline int ReportStatusReq::_internal_result_size() const {
  return _impl_.result_.size();
}
inline int ReportStatusReq::result_size() const {
  return _internal_result_size();
}
inline void ReportStatusReq::clear_result() {
  _impl_.result_.Clear();
}
inline ::ylars::HostCallResult* ReportStatusReq::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:ylars.ReportStatusReq.result)
  return _impl_.result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostCallResult >*
ReportStatusReq::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:ylars.ReportStatusReq.result)
  return &_impl_.result_;
}
inline const ::ylars::HostCallResult& ReportStatusReq::_internal_result(int index) const {
  return _impl_.result_.Get(index);
}
inline const ::ylars::HostCallResult& ReportStatusReq::result(int index) const {
  // @@protoc_insertion_point(field_get:ylars.ReportStatusReq.result)
  return _internal_result(index);
}
inline ::ylars::HostCallResult* ReportStatusReq::_internal_add_result() {
  return _impl_.result_.Add();
}
inline ::ylars::HostCallResult* ReportStatusReq::add_result() {
  ::ylars::HostCallResult* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:ylars.ReportStatusReq.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ylars::HostCallResult >&
ReportStatusReq::result() const {
  // @@protoc_insertion_point(field_list:ylars.ReportStatusReq.result)
  return _impl_.result_;
}

// uint32 ts = 5;
inline void ReportStatusReq::clear_ts() {
  _impl_.ts_ = 0u;
}
inline uint32_t ReportStatusReq::_internal_ts() const {
  return _impl_.ts_;
}
inline uint32_t ReportStatusReq::ts() const {
  // @@protoc_insertion_point(field_get:ylars.ReportStatusReq.ts)
  return _internal_ts();
}
inline void ReportStatusReq::_internal_set_ts(uint32_t value) {
  
  _impl_.ts_ = value;
}
inline void ReportStatusReq::set_ts(uint32_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:ylars.ReportStatusReq.ts)
}

// -------------------------------------------------------------------

// GetHostRequest

// uint32 seq = 1;
inline void GetHostRequest::clear_seq() {
  _impl_.seq_ = 0u;
}
inline uint32_t GetHostRequest::_internal_seq() const {
  return _impl_.seq_;
}
inline uint32_t GetHostRequest::seq() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostRequest.seq)
  return _internal_seq();
}
inline void GetHostRequest::_internal_set_seq(uint32_t value) {
  
  _impl_.seq_ = value;
}
inline void GetHostRequest::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostRequest.seq)
}

// uint32 modid = 2;
inline void GetHostRequest::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t GetHostRequest::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t GetHostRequest::modid() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostRequest.modid)
  return _internal_modid();
}
inline void GetHostRequest::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void GetHostRequest::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostRequest.modid)
}

// uint32 cmdid = 3;
inline void GetHostRequest::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t GetHostRequest::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t GetHostRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostRequest.cmdid)
  return _internal_cmdid();
}
inline void GetHostRequest::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void GetHostRequest::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostRequest.cmdid)
}

// -------------------------------------------------------------------

// GetHostResponse

// uint32 seq = 1;
inline void GetHostResponse::clear_seq() {
  _impl_.seq_ = 0u;
}
inline uint32_t GetHostResponse::_internal_seq() const {
  return _impl_.seq_;
}
inline uint32_t GetHostResponse::seq() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostResponse.seq)
  return _internal_seq();
}
inline void GetHostResponse::_internal_set_seq(uint32_t value) {
  
  _impl_.seq_ = value;
}
inline void GetHostResponse::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostResponse.seq)
}

// uint32 modid = 2;
inline void GetHostResponse::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t GetHostResponse::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t GetHostResponse::modid() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostResponse.modid)
  return _internal_modid();
}
inline void GetHostResponse::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void GetHostResponse::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostResponse.modid)
}

// uint32 cmdid = 3;
inline void GetHostResponse::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t GetHostResponse::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t GetHostResponse::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostResponse.cmdid)
  return _internal_cmdid();
}
inline void GetHostResponse::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void GetHostResponse::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostResponse.cmdid)
}

// int32 retcode = 4;
inline void GetHostResponse::clear_retcode() {
  _impl_.retcode_ = 0;
}
inline int32_t GetHostResponse::_internal_retcode() const {
  return _impl_.retcode_;
}
inline int32_t GetHostResponse::retcode() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostResponse.retcode)
  return _internal_retcode();
}
inline void GetHostResponse::_internal_set_retcode(int32_t value) {
  
  _impl_.retcode_ = value;
}
inline void GetHostResponse::set_retcode(int32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:ylars.GetHostResponse.retcode)
}

// .ylars.HostInfo host = 5;
inline bool GetHostResponse::_internal_has_host() const {
  return this != internal_default_instance() && _impl_.host_ != nullptr;
}
inline bool GetHostResponse::has_host() const {
  return _internal_has_host();
}
inline void GetHostResponse::clear_host() {
  if (GetArenaForAllocation() == nullptr && _impl_.host_ != nullptr) {
    delete _impl_.host_;
  }
  _impl_.host_ = nullptr;
}
inline const ::ylars::HostInfo& GetHostResponse::_internal_host() const {
  const ::ylars::HostInfo* p = _impl_.host_;
  return p != nullptr ? *p : reinterpret_cast<const ::ylars::HostInfo&>(
      ::ylars::_HostInfo_default_instance_);
}
inline const ::ylars::HostInfo& GetHostResponse::host() const {
  // @@protoc_insertion_point(field_get:ylars.GetHostResponse.host)
  return _internal_host();
}
inline void GetHostResponse::unsafe_arena_set_allocated_host(
    ::ylars::HostInfo* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_);
  }
  _impl_.host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ylars.GetHostResponse.host)
}
inline ::ylars::HostInfo* GetHostResponse::release_host() {
  
  ::ylars::HostInfo* temp = _impl_.host_;
  _impl_.host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ylars::HostInfo* GetHostResponse::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:ylars.GetHostResponse.host)
  
  ::ylars::HostInfo* temp = _impl_.host_;
  _impl_.host_ = nullptr;
  return temp;
}
inline ::ylars::HostInfo* GetHostResponse::_internal_mutable_host() {
  
  if (_impl_.host_ == nullptr) {
    auto* p = CreateMaybeMessage<::ylars::HostInfo>(GetArenaForAllocation());
    _impl_.host_ = p;
  }
  return _impl_.host_;
}
inline ::ylars::HostInfo* GetHostResponse::mutable_host() {
  ::ylars::HostInfo* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:ylars.GetHostResponse.host)
  return _msg;
}
inline void GetHostResponse::set_allocated_host(::ylars::HostInfo* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host);
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.host_ = host;
  // @@protoc_insertion_point(field_set_allocated:ylars.GetHostResponse.host)
}

// -------------------------------------------------------------------

// ReportRequest

// uint32 modid = 1;
inline void ReportRequest::clear_modid() {
  _impl_.modid_ = 0u;
}
inline uint32_t ReportRequest::_internal_modid() const {
  return _impl_.modid_;
}
inline uint32_t ReportRequest::modid() const {
  // @@protoc_insertion_point(field_get:ylars.ReportRequest.modid)
  return _internal_modid();
}
inline void ReportRequest::_internal_set_modid(uint32_t value) {
  
  _impl_.modid_ = value;
}
inline void ReportRequest::set_modid(uint32_t value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:ylars.ReportRequest.modid)
}

// uint32 cmdid = 2;
inline void ReportRequest::clear_cmdid() {
  _impl_.cmdid_ = 0u;
}
inline uint32_t ReportRequest::_internal_cmdid() const {
  return _impl_.cmdid_;
}
inline uint32_t ReportRequest::cmdid() const {
  // @@protoc_insertion_point(field_get:ylars.ReportRequest.cmdid)
  return _internal_cmdid();
}
inline void ReportRequest::_internal_set_cmdid(uint32_t value) {
  
  _impl_.cmdid_ = value;
}
inline void ReportRequest::set_cmdid(uint32_t value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:ylars.ReportRequest.cmdid)
}

// .ylars.HostInfo host = 3;
inline bool ReportRequest::_internal_has_host() const {
  return this != internal_default_instance() && _impl_.host_ != nullptr;
}
inline bool ReportRequest::has_host() const {
  return _internal_has_host();
}
inline void ReportRequest::clear_host() {
  if (GetArenaForAllocation() == nullptr && _impl_.host_ != nullptr) {
    delete _impl_.host_;
  }
  _impl_.host_ = nullptr;
}
inline const ::ylars::HostInfo& ReportRequest::_internal_host() const {
  const ::ylars::HostInfo* p = _impl_.host_;
  return p != nullptr ? *p : reinterpret_cast<const ::ylars::HostInfo&>(
      ::ylars::_HostInfo_default_instance_);
}
inline const ::ylars::HostInfo& ReportRequest::host() const {
  // @@protoc_insertion_point(field_get:ylars.ReportRequest.host)
  return _internal_host();
}
inline void ReportRequest::unsafe_arena_set_allocated_host(
    ::ylars::HostInfo* host) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_);
  }
  _impl_.host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ylars.ReportRequest.host)
}
inline ::ylars::HostInfo* ReportRequest::release_host() {
  
  ::ylars::HostInfo* temp = _impl_.host_;
  _impl_.host_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ylars::HostInfo* ReportRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:ylars.ReportRequest.host)
  
  ::ylars::HostInfo* temp = _impl_.host_;
  _impl_.host_ = nullptr;
  return temp;
}
inline ::ylars::HostInfo* ReportRequest::_internal_mutable_host() {
  
  if (_impl_.host_ == nullptr) {
    auto* p = CreateMaybeMessage<::ylars::HostInfo>(GetArenaForAllocation());
    _impl_.host_ = p;
  }
  return _impl_.host_;
}
inline ::ylars::HostInfo* ReportRequest::mutable_host() {
  ::ylars::HostInfo* _msg = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:ylars.ReportRequest.host)
  return _msg;
}
inline void ReportRequest::set_allocated_host(::ylars::HostInfo* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host);
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.host_ = host;
  // @@protoc_insertion_point(field_set_allocated:ylars.ReportRequest.host)
}

// bool isSucc = 4;
inline void ReportRequest::clear_issucc() {
  _impl_.issucc_ = false;
}
inline bool ReportRequest::_internal_issucc() const {
  return _impl_.issucc_;
}
inline bool ReportRequest::issucc() const {
  // @@protoc_insertion_point(field_get:ylars.ReportRequest.isSucc)
  return _internal_issucc();
}
inline void ReportRequest::_internal_set_issucc(bool value) {
  
  _impl_.issucc_ = value;
}
inline void ReportRequest::set_issucc(bool value) {
  _internal_set_issucc(value);
  // @@protoc_insertion_point(field_set:ylars.ReportRequest.isSucc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ylars

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ylars::MessageId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ylars::MessageId>() {
  return ::ylars::MessageId_descriptor();
}
template <> struct is_proto_enum< ::ylars::LastRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ylars::LastRetCode>() {
  return ::ylars::LastRetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ylars_2eproto
